name: 'Assemble Flock'
description: 'Checkout flock into the path "flock" and then apply the patches'
inputs:
  flutter_ref:
    required: true
    description: "the ref of the flutter repo to use as a base (typically the most recent commit on either master, stable, or beta)"

  flutter_repo:
    required: false
    description: "the flutter repo to use as a base"
    default: flutter/flutter

  token: 
    required: false
    description: "An access token, such as a personal access token (PAT) or organization token, which has read access to the base repo (usually flutter/flutter), and also has write access to the fork repo (e.g., join-the-flock/flock). Even though this step doesn't push any changes to the fork repo, GitHub won't allow any future push to the fork repo, unless the base repo is originally checked out with that token. Therefore, the token must be used up front at this stage during initial checkout and assembly."
    default: ${{ github.token }}

  fetch_depth:
    description: "The git fetch depth used when checking out the base repo (typically Flutter). This action walks the engine history to select an engine hash. When the fetch depth is zero, that history walking should always work. If the fetch depth is 1+, it's possible that an unexpected engine hash is selected. Use at own discretion."
    required: false
    default: 0

  patches_ref:
    required: true
    description: "the ref of the branch or ref to use for patching flutter"
    default: main

  patches_repo:
    required: false
    description: "the repo to use for patches"
    default: join-the-flock/flock-patches

runs:
  using: "composite"
  steps:
    - name: checkout base flutter ref
      uses: actions/checkout@v4
      with:
        path: 'flock'
        fetch-depth: ${{inputs.fetch_depth}}
        repository: ${{inputs.flutter_repo}}
        ref: '${{inputs.flutter_ref}}'
        token: ${{ inputs.token }}
    
    - name: checkout patches ref
      uses: actions/checkout@v4
      with:
        path: 'patches'
        repository: ${{inputs.patches_repo}}
        ref: '${{inputs.patches_ref}}'
        token: ${{ inputs.token }}

    # Compute an engine version hash so the flutter tool will be able to find a precompiled engine
    - name: save engine hash
      shell: bash
      run: |
        cd ./flock
        ./bin/internal/update_engine_version.sh
        cp ./bin/cache/engine.stamp ./bin/internal/engine.version
      
        git add -f ./bin/internal/engine.version
        git config --global user.email "join-the-flock@users.noreply.github.com"
        git config --global user.name "join-the-flock"
        git commit -m "save engine version" --allow-empty
    
    - name: Apply Flock patches on top of Flutter
      shell: bash
      run: |
        set -euo pipefail

        # Run patch import; capture logs for context on failure
        if ! tools/git-import-patches -p patches -3 2> patch_fail.log; then
          echo "::error::git-import-patches failed. Showing conflicts and contextâ€¦"

          echo "::group::Last 200 lines of git-import-patches stderr"
          tail -n 200 patch_fail.log || true
          echo "::endgroup::"

          echo "::group::Git status (flock)"
          (cd flock && git status --porcelain=v1 && echo && git diff --name-only --diff-filter=U || true)
          echo "::endgroup::"

          echo "::group::Conflict markers (flock)"
          (
            cd flock || exit 0
            # Prefer Git's view of unmerged paths
            files="$(git diff --name-only --diff-filter=U || true)"
            if [ -n "$files" ]; then
              for f in $files; do
                echo "--- $f ---"
                # Print only the lines with conflict markers, with line numbers
                awk '
                  /^[<]{7}|^[=]{7}|^[>]{7}/ { printf("%s:%d:%s\n", FILENAME, NR, $0) }
                ' "$f" || true
              done
            else
              # Fallback: grep recursively for markers if Git didn't flag unmerged paths
              grep -R -n -E "^(<<<<<<<|=======|>>>>>>>)" . || true
            fi
          )
          echo "::endgroup::"

          exit 1
        fi
